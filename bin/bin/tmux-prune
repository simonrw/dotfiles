#!/usr/bin/env python3

import subprocess as sp
from pathlib import Path
from datetime import datetime, timezone
import logging
import argparse

logging.basicConfig(
    level=logging.WARNING, format="%(asctime)s|%(levelname)s: %(message)s"
)
logger = logging.getLogger("tmux-prune")


WEEK = 7 * 24 * 60 * 60


def kill_session(name):
    sp.check_call(["tmux", "kill-session", "-t", name])


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--force", action="store_true", default=False)
    parser.add_argument("-v", "--verbose", action="count", default=0)
    args = parser.parse_args()

    if args.verbose == 1:
        logger.setLevel(logging.INFO)
    elif args.verbose > 1:
        logger.setLevel(logging.DEBUG)

    prune_dir = Path.home() / ".tmux" / "prunes"
    prune_dir.mkdir(exist_ok=True, parents=True)
    logger.info(f"using prune directory {prune_dir}")

    now = datetime.now(tz=timezone.utc).timestamp()
    logger.info(f"now:\t{datetime.fromtimestamp(now)}")
    cutoff = now - WEEK
    logger.info(f"cutoff:\t{datetime.fromtimestamp(cutoff)}")

    to_prune = []
    output = (
        sp.check_output(["tmux", "ls", "-F", "#S #{session_activity}"])
        .decode()
        .split("\n")
    )
    for line in output:
        line = line.strip()
        if not line:
            continue
        logger.debug(f"got line {line}")

        parts = line.split()
        if len(parts) != 2:
            logger.warning(f"invalid output")
            continue
        name, activity = parts
        activity = int(activity)
        if activity < cutoff:
            logger.info("adding session {name]")
            to_prune.append(name)
        else:
            logger.debug(f"session {name} too new, not pruning")

    if len(to_prune) == 0:
        logger.info("no sessions to prune found")
        exit(0)

    if not args.force:
        logger.warning("-f/--force not supplied; not pruning")
        exit(0)

    prune_fname = prune_dir / f"{now}.txt"
    assert not prune_fname.is_file()
    with prune_fname.open("w") as outfile:
        for prune in to_prune:
            kill_session(prune)
            print(prune, file=outfile)
