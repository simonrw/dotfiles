#!/usr/bin/env python3


import subprocess as sp
from pathlib import Path
import argparse
import os
import logging


logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger("tnew")


def list_sessions():
    try:
        sessions = run_tmux("ls", "-F", "#S")
    except sp.CalledProcessError:
        return []

    yield from sessions.split()


def session_exists(session_name):
    logger.debug(f"looking for session {session_name}")
    for session in list_sessions():
        if session_name == session:
            logger.debug(f"found session {session_name}")
            return True
    logger.debug(f"cannot find session {session_name}")
    return False


def attach_to_session(session_name):
    logger.debug(f"attaching to session {session_name}")
    run_tmux("attach", "-t", session_name)


def create_session(session_name):
    logger.debug(f"creating new session {session_name}")
    run_tmux("new-session", "-s", session_name)


def switch_client(session_name):
    logger.debug(f"switching to session {session_name}")
    run_tmux("switch-client", "-t", session_name)


def run_tmux(*args):
    cmd = [
        "tmux",
    ] + list(args)
    logger.debug(f"running command: {cmd}")
    proc = sp.run(cmd, check=True, stdout=sp.PIPE)
    return proc.stdout.decode("utf8")


parser = argparse.ArgumentParser()
parser.add_argument("-p", "--path", type=Path, default=Path.cwd())
parser.add_argument("-v", "--verbose", action="count", default=0)
args = parser.parse_args()

if args.verbose == 1:
    logger.setLevel(logging.INFO)
elif args.verbose > 1:
    logger.setLevel(logging.DEBUG)

args.path.mkdir(exist_ok=True, parents=True)

tmux_name = f"{args.path.parent.name}/{args.path.name}"

if os.getenv("TMUX"):
    logger.debug(f"in tmux session")
    if session_exists(tmux_name):
        switch_client(tmux_name)
    else:
        create_session(tmux_name)
else:
    logger.debug("not in tmux session")
    if session_exists(tmux_name):
        attach_to_session(tmux_name)
    else:
        create_session(tmux_name)
