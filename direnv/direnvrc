realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

layout_python-venv() {
    local python=${1:-python3}
    [[ $# -gt 0 ]] && shift
    unset PYTHONHOME
    if [[ -n ${VIRTUAL_ENV+x} ]]; then
        VIRTUAL_ENV=$(realpath "${VIRTUAL_ENV}")
    else
        local python_version
        python_version=$("$python" -c "import platform; print(platform.python_version())")
        if [[ -z $python_version ]]; then
            log_error "Could not detect Python version"
            return 1
        fi
        # create a virtual environment in the common VIRTUAL_ENV_ROOT dir,
        # namespaced by location on disk. Spaces and directory separators are
        # replaced with hyphens.
        VIRTUAL_ENV_ROOT=${HOME}/.virtualenvs
        test -d $VIRTUAL_ENV_ROOT || mkdir -p $VIRTUAL_ENV_ROOT
        VIRTUAL_ENV=${VIRTUAL_ENV_ROOT}/$(pwd | sed 's#/#-#g' | sed 's/ /-/g')/$python_version
    fi
    export VIRTUAL_ENV
    if [[ ! -d $VIRTUAL_ENV ]]; then
        log_status "no venv found; creating $VIRTUAL_ENV"
        if has virtualenv; then
            virtualenv --python "$python" "$VIRTUAL_ENV"
        else
            "$python" -m venv "$VIRTUAL_ENV"
        fi
    fi

    PATH="${VIRTUAL_ENV}/bin:${PATH}"
    export PATH
}

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  # create venv if it doesn't exist
  poetry run true

  export VIRTUAL_ENV=$(poetry env info --path)
  export POETRY_ACTIVE=1
  PATH_add "$VIRTUAL_ENV/bin"
}


# Support local vimrc config files
# https://github.com/direnv/direnv/wiki/Vim
vimrc() {
  local extravim="$(find_up .vimrc)"
  if [ -n "$extravim" ]; then
    echo "Adding extra .vimrc: ${extravim}"
    path_add EXTRA_VIM $extravim
  fi
}

# vim: ft=sh
