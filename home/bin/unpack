#!/usr/bin/env python

from __future__ import print_function

try:

    from optparse import OptionParser
    from subprocess import STDOUT, PIPE, Popen
    from sys import stderr, exit, argv
    from os.path import abspath, basename, splitext
    import six

    def unzip(file, loc):
        p = Popen("unzip -l %s" % (file,), shell=True, stdout=PIPE, stderr=PIPE)
        result, error = p.communicate()

        for line in result.split("\n")[3:10 + 3]:
            words = line.split()
            if len(words) == 4:
                print(words[-1])
        print("...")

        answer = six.moves.input("Continue [Y/n]? ")

        if answer.upper() == "Y" or not answer:
            p = Popen("unzip -d %s %s" % (loc, file), shell=True, stdout=PIPE, stderr=PIPE)
            result, error = p.communicate()
            print("Done")
        else:
            print("No files were extracted")

    def unpack(file, loc):
        """Unpacks file to location given"""
        p = Popen("tar -xvf %s -C %s" % (file, loc), shell=True, stdout=PIPE, stderr=PIPE)
        result, error = p.communicate()

    fileendings = [".tar.gz", ".tar.bz2", ".tar", ".bz2", ".gz", ".zip", ".tgz"]

    usage = "usage: %s [options] file.tar.gz" % basename(argv[0])
    parser = OptionParser(usage=usage)

    parser.add_option("-C", "--directory", action="store", default=".",
                      help="Dir to unpack into (defaults to .)", dest="dir")

    parser.add_option("-a", "--all", action="store_true", default=False,
                      help="Display all files", dest="all")

    options, args = parser.parse_args()

    if not len(args):
        print(usage, file=stderr)
        exit(1)

    if splitext(args[0])[-1] not in fileendings:
        print("File must be an archive file", file=stderr)
        exit(1)

    if splitext(args[0])[-1] == ".zip":
        unzip(args[0], options.dir)  # must treat zip files seperately
        exit()

    p = Popen("tar -tf %s" % args[0], shell=True, stdout=PIPE, stderr=PIPE)
    result, error = p.communicate()

    if options.all:
        print(result)
    else:
        for val in result.split()[:10]:
            print(val)

        print("...")

    answer = six.moves.input("Continue [Y/n]? ")

    if answer.upper() == "Y" or not answer:
        unpack(abspath(args[0]), abspath(options.dir))
        print("Done")
    else:
        print("No files were extracted")

except KeyboardInterrupt:  # catch SIGINT
    print("Interrupt caught, exiting...")
