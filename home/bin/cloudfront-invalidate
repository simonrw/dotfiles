#!/usr/bin/env python
##!/bin/sh

# set -euo pipefail

# main() {
#    if [[ $# -ne 2 ]]; then
#        echo "Usage: $0 <distribution-id> <prefix>" >&2
#        return 1
#    fi

#    if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
#        echo "Usage: $0 <distribution-id> <prefix>" >&2
#        return 1
#    fi

#    distribution_id="$1"
#    prefix="$2"

#    # dist_info="$(aws cloudfront create-invalidation --distribution-id "${distribution_id}" --paths "${prefix}")"
#    dist_info='{
#    "Location": "https://cloudfront.amazonaws.com/2020-05-31/distribution/E24FHQBPYPXHP7/invalidation/I3DPC8Q68DBDEN",
#    "Invalidation": {
#        "Id": "I3DPC8Q68DBDEN",
#        "Status": "InProgress",
#        "CreateTime": "2022-05-06T10:28:38.440000+00:00",
#        "InvalidationBatch": {
#            "Paths": {
#                "Quantity": 1,
#                "Items": [
#                    "/8bd24419-f529-4734-b30a-92ca5cdcb0fe/default.mpd"
#                ]
#            },
#            "CallerReference": "cli-1651832917-623871"
#        }
#    }
# }'
#    invalidation_id="$(echo $dist_info | jq -r .Invalidation.Id)"
#    invalidation_status="$(aws cloudfront get-invalidation --distribution-id "${distribution_id}" --id "${invalidation_id}")"


# }

# main "$@

from typing import List
import argparse
import json
import time
import subprocess as sp


class Cloudfront:
    def __init__(self, distribution_id: str):
        self.distribution_id = distribution_id

    def create_invalidation(self, paths: List[str]) -> str:
        cmd = [
            "aws",
            "cloudfront",
            "create-invalidation",
            "--distribution-id",
            self.distribution_id,
            "--paths",
        ] + paths
        output = sp.check_output(cmd).decode()
        res = json.loads(output)
        return res["Invalidation"]["Id"]

    def get_invalidation_status(self, invalidation_id: str) -> str:
        cmd = [
            "aws",
            "cloudfront",
            "get-invalidation",
            "--distribution-id",
            self.distribution_id,
            "--id",
            invalidation_id,
        ]
        output = sp.check_output(cmd).decode()
        res = json.loads(output)

        return res["Invalidation"]["Status"]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--distribution-id", required=True)
    parser.add_argument("-p", "--paths", nargs="+")
    args = parser.parse_args()

    cf = Cloudfront(args.distribution_id)
    invalidation_id = cf.create_invalidation(args.paths)
    status = None
    while status != "Completed":
        time.sleep(5)
        status = cf.get_invalidation_status(invalidation_id)
