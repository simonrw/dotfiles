#!/usr/bin/env python3


from pathlib import Path
import argparse
import logging
import re
import subprocess as sp
import sys


logging.basicConfig(level=logging.WARNING)


THEME_MAPS = {
    "dark": {
        "vim": {
            "colourscheme": "srw256",
            "lightline": "default",
        },
        "kitty": "srw.conf",
        "ipython": "Linux",
        "alacritty": "colors_default",
        "bat": "Monokai Extended",
        "emacs": "wombat",
    },
    "light": {
        "vim": {
            "colourscheme": "github_light",
            "lightline": "PaperColor",
        },
        "kitty": "github_light.conf",
        "ipython": "LightBG",
        "alacritty": "colors_papercolor",
        "bat": "GitHub",
        "emacs": "whiteboard",
    },
    "solarized-light": {
        "vim": {
            "colourscheme": "NeoSolarized",
            "lightline": "solarized",
        },
        "kitty": "Solarized_Light.conf",
        "bat": "GitHub",
        "emacs": "whiteboard",
    },
}
TMUX_COLOURS = {
    "light": {
        "status_bg": "#ffffff",
        "accent_color": "#032f62",
        "text_color": "colour7",
        "active_text_color": "#032f62",
        "pane_border_color": "colour6",
    },
    "dark": {
        "status_bg": "#2b2b2b",
        "accent_color": "colour12",
        "text_color": "colour7",
        "active_text_color": "colour12",
        "pane_border_color": "colour240",
    },
    "solarized-light": {
        "status_bg": "#fdf6e3",
        "accent_color": "colour9",
        "text_color": "colour7",
        "active_text_color": "colour9",
        "pane_border_color": "colour6",
    },
}


HOME_DIR = Path.home()


class Replacer:
    def replace_in_file(self, path, matcher, replacement):
        with path.open() as infile:
            old_text = infile.read()

        (new_text, num) = re.subn(matcher, replacement, old_text, flags=re.MULTILINE)
        if num == 0:
            logging.warning(f"no replacements made, {path}, {matcher}, {replacement}")

        with path.open("w") as outfile:
            outfile.write(new_text)

    def multi_replace_in_file(self, path, matcher, replacements):
        replacement = "\n".join(replacements)
        self.replace_in_file(path, matcher, replacement)


class ThemeChooser:
    def __init__(self, theme_name):
        self.theme_name = theme_name
        self.replacer = Replacer()

        # TODO(maybe): emacs
        self.method_names = [
            "update_vim",
            "update_tmux",
            "update_kitty",
            "update_fzf",
            "update_ipython",
            "update_alacritty",
            "update_bat",
            "update_emacs",
        ]

    def load_theme(self):
        logging.info(f"loading theme `{self.theme_name}`")
        for method_name in self.method_names:
            method = getattr(self, method_name)
            if not method:
                raise AttributeError(
                    f"No method {method_name} found for {self.__class__.__name__}"
                )
            method()

    def change_macos_theme(self):
        if self.theme_name == "light":
            cmd = ["dark-mode", "off"]
        elif self.theme_name == "dark":
            cmd = ["dark-mode", "on"]
        else:
            raise NotImplementedError(
                f"mode {self.theme_name} is not supported by `dark-mode`"
            )

        sp.check_call(cmd)

    def update_vim(self):
        vimrc = HOME_DIR / ".vim" / "vimrc"
        theme_name = self._theme_map("vim")
        if not theme_name:
            return
        theme = theme_name["colourscheme"]
        self.replacer.replace_in_file(
            vimrc, r"^colorscheme .*$", f"colorscheme {theme}"
        )

        if theme == "dark":
            background = "dark"
        else:
            background = "light"
        self.replacer.replace_in_file(
            vimrc, r"^set background=(dark|light)", f"set background={background}"
        )
        lightline_theme = theme_name.get("lightline")
        if not lightline_theme:
            logging.warning("no lightline theme found")
            return
        self.replacer.replace_in_file(
            vimrc,
            r"^let g:lightline.colorscheme.*$",
            f"let g:lightline.colorscheme = '{lightline_theme}'",
        )

    def update_tmux(self):
        tmux_conf = HOME_DIR / ".tmux.d" / "colourschemes" / "srw.conf"
        for key, value in TMUX_COLOURS[self.theme_name].items():
            self.replacer.replace_in_file(
                tmux_conf,
                fr"^{key}.*$",
                f"{key}={value}",
            )

    def update_kitty(self):
        kitty_conf = HOME_DIR / ".config" / "kitty" / "kitty.conf"
        theme_name = self._theme_map("kitty")
        if not theme_name:
            return
        self.replacer.replace_in_file(
            kitty_conf, r"^include themes/.*$", f"include themes/{theme_name}"
        )

    def update_fzf(self):
        zshrc = HOME_DIR / ".zsh" / "setup" / "60sk.zsh"
        pattern = r"^export SKIM_DEFAULT_OPTIONS=\"--color (light|dark)"
        background = "dark"
        if self.theme_name != "dark":
            background = "light"

        replacement = f'export SKIM_DEFAULT_OPTIONS="--color {background}'
        self.replacer.replace_in_file(zshrc, pattern, replacement)

    def update_ipython(self):
        try:
            config = HOME_DIR / ".ipython" / "profile_default" / "ipython_config.py"
            pattern = r"^c.TerminalInteractiveShell.colors = .*"
            theme_name = self._theme_map("ipython")
            if not theme_name:
                return
            replacement = f'c.TerminalInteractiveShell.colors = "{theme_name}"'
            self.replacer.replace_in_file(config, pattern, replacement)
        except Exception as e:
            logging.warning("could not find ipython config")

    def update_alacritty(self):
        config = HOME_DIR / ".config" / "alacritty" / "alacritty.yml"
        pattern = r"^colors: \*.*$"
        theme_name = self._theme_map("alacritty")
        if not theme_name:
            return
        replacement = f"colors: *{theme_name}"
        self.replacer.replace_in_file(config, pattern, replacement)

    def update_bat(self):
        config = HOME_DIR / ".config" / "bat" / "config"
        pattern = r"^--theme=.*"
        theme_name = self._theme_map("bat")
        if not theme_name:
            return
        replacement = f'--theme="{theme_name}"'
        self.replacer.replace_in_file(config, pattern, replacement)

    def update_emacs(self):
        emacsrc = HOME_DIR / ".emacs.d" / "init.el"
        theme_name = self._theme_map("emacs")
        if not theme_name:
            return
        self.replacer.replace_in_file(
            emacsrc, r"^\(load-theme.*$", f"(load-theme '{theme_name} t)"
        )

    def _theme_map(self, property):
        theme_name = THEME_MAPS[self.theme_name].get(property)
        if not theme_name:
            logging.warning(f"could not find theme for {property}")
        return theme_name


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("theme", nargs="?")
    parser.add_argument("--list-themes", action="store_true", default=False)
    parser.add_argument("-v", "--verbose", action="count", default=0)
    parser.add_argument(
        "-m", "--macos", action="store_true", default=False, help="Change macOS theme"
    )
    args = parser.parse_args()

    if args.verbose == 1:
        logging.getLogger().setLevel(logging.INFO)
    elif args.verbose >= 2:
        logging.getLogger().setLevel(logging.DEBUG)

    if args.list_themes:
        print("Available themes:")
        for theme in THEME_MAPS:
            print(f"- {theme}")

        sys.exit(0)

    if args.theme is None:
        parser.print_help()
        parser.error("theme argument required")

    theme = args.theme.lower()
    chooser = ThemeChooser(theme)
    chooser.load_theme()

    if args.macos:
        chooser.change_macos_theme()
