let g:mapleader = ","
let g:maplocalleader = '\\'

" remove all existing autocmds
autocmd!

" general settings
let g:completion_framework = "ale"
let g:include_treesitter = 1

lua require('config')

syntax on

if has('nvim-0.5')
    augroup LuaHighlight
        autocmd!
        autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank()
    augroup END
endif


if executable('rg')
    let &grepprg="rg --vimgrep"
endif

let g:markdown_folding = 1

" Configure fzf window style
let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.4, 'yoffset': 1, 'border': 'top' } }

" Configure vim tmux runner
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 1
let g:VtrAppendNewline = 1

" Add mapping to open/close the quickfix list
" Taken from: http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

augroup last_position
    autocmd!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it for commit messages, when the position is invalid, or when
    " inside an event handler (happens when dropping a file on gvim).
    autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" Configure neovim's terminal mode
if has('nvim')
    tnoremap <Esc> <C-\><C-n>
    tnoremap <M-[> <Esc>
    tnoremap <C-v><Esc> <Esc>

    augroup terminal_settings
        autocmd!
        autocmd TermOpen * startinsert
    augroup END
endif

" Automatically format elixir files on save
let g:mix_format_on_save = 1

if has('nvim')
    runtime! plugin/python_setup.vim
endif

" Disable go version warnings
let g:go_version_warning = 0
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
" https://pmihaylov.com/vim-for-go-development/
if g:completion_framework == "coc"
    " remove vim-go mapping for go to definition (rely on vim-coc)
    let g:go_def_mapping_enabled = 0
    " disable linters as they are performed by coc.vim
    let g:go_diagnostics_enabled = 0
    let g:go_metalinter_enabled = []
    " don't jump to errors after metalinter is invoked
    let g:go_jump_to_error = 0
    " run go imports on file save
    let g:go_fmt_command = "goimports"
    " automatically highlight variable your cursor is on
    let g:go_auto_sameids = 0
    " highlights
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_generate_tags = 1
endif

if has('nvim-0.5') && g:include_treesitter
luafile ~/.vim/lua/treesitterconfig.lua
endif

" Configure elm.vim
let g:elm_format_fail_silently = 1

" Enable autoformatting of valid pretter-compatible files
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:dispatch_quickfix_height=40
let g:dispatch_tmux_height=40

function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent= 0
let g:vim_markdown_no_default_key_mappings = 1
let g:markdown_fenced_languages = ["python", "javascript", "toml", "rust", "json"]

" configure python3 for neovim
"
" We ensure that a global python installation with the python3 file is set 
let s:python3_venv_path = expand("~/.local/share/nvim/venv3")
let s:python3_interp_path = s:python3_venv_path . "/bin/python"
if filereadable(s:python3_interp_path)
    let g:python3_host_prog = s:python3_interp_path
else
    echoerr "Python3 virtual environment not set up at " . s:python3_venv_path
        \ . ". Create virtual environment there and install `pynvim`."
endif

" configure abbreviations
source ~/.vim/abbreviations.vim

augroup diff_mode
    " If doing a diff. Upon writing changes to file, automatically update the
    " differences
    autocmd!
    autocmd BufWritePost * if &diff == 1 | diffupdate | endif
augroup END

let g:hardtime_default_on = 1
let g:hardtime_ignore_quickfix = 1
let g:hardtime_allow_different_key = 1
let g:hardtime_maxcount = 2

" Command to split a terminal window
command! -nargs=* -complete=shellcmd T split | resize 30 | term <args>

" configure fugitive-gitlab
let g:fugitive_gitlab_domains = ["https://gitlab.pixsystem.net", "https://gitlab.com"]

" configure nord
let g:nord_uniform_diff_background = 1

" configure vim markdown preview
" disable auto closing
let g:mkdp_auto_close = 0

" Disable concealing with indentline
let g:indentLine_setConceal = 0

" completion
if g:completion_framework == "coc"
    " configure conflicted status line
    set statusline=%<%f\ %{coc#status()}%{get(b:,'coc_current_function','')}%h%m%r%=%-14.(%l,%c%V%)\ %P
    set statusline+=%{ConflictedVersion()}

    " Triggering completion
    inoremap <silent><expr> <c-p> coc#refresh()
    inoremap <silent><expr> <c-n> coc#refresh()

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nnoremap <silent> gh :CocList symbols<cr>
    nnoremap <silent> <leader>cr :CocRestart<cr>

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')
    nnoremap <silent> <leader>y :Format<cr>

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Use K to show documentation in preview window.
    nnoremap <silent> <leader>d :call <SID>show_documentation()<CR>

    function! s:check_back_space() abort
        let col = col(".") - 1
        return !col || getline(".")[col - 1] =~# '\s'
    endfunction

    inoremap <silent><expr> <Tab>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<Tab>" :
          \ coc#refresh()

    inoremap <silent><expr> <C-space> coc#refresh()

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Prevent missing cursor bug
    let g:coc_disable_transparent_cursor = 1

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " Show available actions
    nnoremap <silent> <leader>ca :CocAction<cr>

    if has('nvim-0.4.0') || has('patch-8.2.0750')
        nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
        nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
        inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
        inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    endif

    " highlighting overrides for plugins
    hi CocUnderline gui=none cterm=none

    let g:coc_global_extensions = [ 'coc-pyright', 'coc-json', 'coc-go', 'coc-rust-analyzer', 'coc-html' ]
elseif g:completion_framework == "ale"
    " ALE
    nmap <silent> [g <Plug>(ale_previous_wrap)
    nmap <silent> ]g <Plug>(ale_next_wrap)
    nnoremap <silent> <leader>y :ALEFix<cr>
    nnoremap <silent> gd :ALEGoToDefinition<Cr>
    nnoremap <silent> gh :ALEFindReferences<cr>
    nnoremap <silent> <leader>ad :ALEDetail<Cr>

    " set up signs
    let g:ale_sign_error = ">"
    let g:ale_sign_warning = "~"
    let g:ale_virtualtext_cursor = 1
    let g:ale_cursor_detail = 0
    let g:ale_echo_cursor = 0
    let g:ale_set_balloons = 0

    function! LinterStatus() abort
        let l:counts = ale#statusline#Count(bufnr(''))

        let l:all_errors = l:counts.error + l:counts.style_error
        let l:all_non_errors = l:counts.total - l:all_errors

        return l:counts.total == 0 ? 'OK' : printf(
        \   '%dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
    endfunction

    set statusline=%<%f\ (%{LinterStatus()})\ %h%m%r%=%-14.(%l,%c%V%)\ %P
    let g:ale_fix_on_save = 1
elseif g:completion_framework == "nvim" && has('nvim-0.5')
    luafile ~/.vim/lua/customlspconfig.lua
    inoremap <silent><expr> <C-Space> compe#complete()
endif

" Hack around the recent failure of gx
function! OpenURLUnderCursor()
	let s:uri = expand('<cWORD>')
	let s:uri = matchstr(s:uri, "[a-z]*:\/\/[^ >,;)'\"]*")
	let s:uri = substitute(s:uri, '#', '\\#', '')
	if s:uri != ''
        if has("macunix")
            silent exec "!open '".s:uri."'"
        elseif has('unix')
            silent exec "!xdg-open '".s:uri."' 2>/dev/null"
        else
            echom "No open handler found for this OS"
        endif
		:redraw!
	endif
endfunction
nnoremap <silent> gx :call OpenURLUnderCursor()<CR>

let g:lightline = {}
let g:lightline.colorscheme = 'default'
if g:completion_framework == 'coc'
	let g:lightline.active = {
		  \   'left': [ [ 'mode', 'paste' ],
		  \             [ 'cocstatus', 'readonly', 'filename', 'modified', 'gitstatus'] ],
		  \ }
else
	let g:lightline.active = {
		  \   'left': [ [ 'mode', 'paste' ],
		  \             [ 'readonly', 'filename', 'modified', 'gitstatus'] ],
		  \ }
endif
let g:lightline.mode_map = {
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'R',
        \ 'v' : 'V',
        \ 'V' : 'VL',
        \ "\<C-v>": 'VB',
        \ 'c' : 'C',
        \ 's' : 'S',
        \ 'S' : 'SL',
        \ "\<C-s>": 'SB',
        \ 't': 'T',
        \ }
let g:lightline.inactive = g:lightline.active
let g:lightline.component_function = {
      \   'filename': 'LightlineFilename',
      \   'cocstatus': 'coc#status',
      \   'gitstatus': 'FugitiveStatusline',
      \ }
function! LightlineFilename()
  return expand('%:t') !=# '' ? @% : '[No Name]'
endfunction

" Support directory local vimrc files
" https://github.com/direnv/direnv/wiki/Vim
if exists("$EXTRA_VIM")
  for path in split($EXTRA_VIM, ':')
    exec "source ".path
  endfor
endif


colorscheme srw256
