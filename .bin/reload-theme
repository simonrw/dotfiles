#!/usr/bin/env python3

import subprocess as sp
from typing import Protocol
from pathlib import Path
from enum import Enum, auto
from configparser import ConfigParser
from concurrent.futures import ThreadPoolExecutor, as_completed


class Theme(Enum):
    dark = auto()
    light = auto()


class ThemeSwitcher(Protocol):
    def __call__(self, theme: Theme) -> None: ...


def current_theme() -> Theme:
    try:
        output = sp.check_output(
            ["defaults", "read", "NSGlobalDomain", "AppleInterfaceStyle"]
        )
    except sp.CalledProcessError:
        return Theme.light

    if output.decode().strip().lower() == "dark":
        return Theme.dark

    return Theme.light


def reload_tmux(theme: Theme):
    sp.check_call(
        ["tmux", "source-file", str(Path.home() / ".config" / "tmux" / "tmux.conf")]
    )


def signal_editor_to_reload(*process_names: str):
    for process_name in process_names:
        try:
            raw_output = sp.check_output(["pgrep", process_name])
        except sp.CalledProcessError:
            return

    pids = [line.strip() for line in raw_output.decode().splitlines()]
    cmd = ["kill", "-USR1"] + pids
    sp.check_call(cmd)


def reload_helix(theme: Theme):
    theme_file = Path.home() / ".config" / "helix" / "themes" / "adaptive.toml"
    chosen_theme = "catppuccin_macchiato"
    if theme == Theme.light:
        chosen_theme = "onelight"

    with theme_file.open("w") as outfile:
        print(f"inherits = '{chosen_theme}'", file=outfile)

    signal_editor_to_reload("hx")


def reload_neovim(theme: Theme):
    signal_editor_to_reload("nvim")


def reload_git(theme: Theme):
    theme_file = Path.home() / ".config" / "git" / "theme.conf"
    config = ConfigParser()
    config["delta"] = {
        "diff-so-fancy": "false" if theme == Theme.light else "true",
        "line-numbers": "false",
        "side-by-side": "false",
    }
    with theme_file.open("w") as outfile:
        config.write(outfile)


theme = current_theme()

switchers: list[ThemeSwitcher] = [
    reload_tmux,
    reload_helix,
    reload_neovim,
    reload_git,
]

with ThreadPoolExecutor() as pool:
    futs = []
    for fn in switchers:
        futs.append(pool.submit(fn, theme))

    for fut in as_completed(futs):
        fut.result()
