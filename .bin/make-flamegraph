#!/usr/bin/env python3


import subprocess as sp
import os
import platform
import tempfile
import sys
import argparse


def exit_with_message(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


def linux_flamegraph(args):
    raise NotImplementedError("Linux")


def darwin_flamegraph(args, rest):
    execname = os.path.basename(rest[0])
    with tempfile.NamedTemporaryFile(suffix=".stacks") as tfile:
        cmd = [
            "sudo",
            "dtrace",
            "-c",
            " ".join(rest),
            "-o",
            tfile.name,
            "-n",
            'profile-{probe} /execname == "{execname}"/ {{ @[ustack(100)] = count(); }}'.format(
                execname=execname, probe=args.probe
            ),
        ]

        print("sudo password required, if prompted", file=sys.stderr)
        sp.check_call(cmd)

        tfile.seek(0)

        stack_collapse_ps = sp.Popen(["stackcollapse.pl", tfile.name], stdout=sp.PIPE)
        sp.check_call(
            ["flamegraph.pl"], stdout=args.output, stdin=stack_collapse_ps.stdout
        )
        stack_collapse_ps.wait()


PROBES = [97, 199, 499, 997, 1999, 4001, 4999]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-o", "--output", required=False, default="-", type=argparse.FileType("w")
    )
    os_type = platform.system()

    if os_type == "Darwin":
        parser.add_argument(
            "-p", "--probe", type=int, required=False, default=997, choices=PROBES
        )

    args, extra = parser.parse_known_args()

    if not extra:
        exit_with_message("No command supplied")

    handlers = {"Darwin": darwin_flamegraph, "Linux": linux_flamegraph}

    if os_type not in handlers:
        exit_with_message("Operating system not supported: {}".format(os_type))

    handlers[os_type](args, extra)
