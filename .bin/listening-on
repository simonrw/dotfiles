#!/usr/bin/env python

import argparse
import logging
import json
import sys
import subprocess as sp


logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger("listening-on")

def check_privileged_port(port: int):
    check_port(port, sudo=True)


def check_port(port: int, sudo: bool = False):
    cmd = ["lsof", "-n", "-P", "-i", f":{port}"]
    if sudo:
        cmd = ["sudo", "--prompt", "sudo required for checking privileged port: "] + cmd

    child = sp.run(cmd, stdout=sp.PIPE, stderr=sp.PIPE)
    if child.returncode != 0:
        stderr = child.stderr.decode().strip()
        if stderr:
            # we got an error message
            print(f"Error checking port: {stderr}", file=sys.stderr)
            raise SystemExit(1)
        else:
            print(json.dumps([], indent=2))
            raise SystemExit(0)

    # we got some output
    output = child.stdout.decode()
    res = []
    for line in output.split("\n"):
        line = line.strip()
        if not line:
            continue

        logger.debug(f"line: {line}")

        name, pid, owner, _, _, _, _, type, address, *_ = line.split(maxsplit=10)

        if name == "COMMAND":
            # header
            continue

        if "->" in address:
            # means that we have found a file that is
            # connecting on 443 rather than listening
            continue

        res.append(
            {
                "name": name,
                "pid": pid,
                "owner": owner,
                "type": type,
                "address": address,
            }
        )
    print(json.dumps(res, indent=2))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("port", type=int, help="Port to check")
    parser.add_argument("-v", "--verbose", action="count", default=0)
    args = parser.parse_args()

    if args.verbose == 1:
        logger.setLevel(logging.INFO)
    elif args.verbose > 1:
        logger.setLevel(logging.DEBUG)

    check_privileged_port(args.port)
