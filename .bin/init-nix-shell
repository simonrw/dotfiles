#!/usr/bin/env python3

"""
Create a shell.nix with default settings in the current directory, and set the .envrc file to "use nix"
"""

from __future__ import annotations
import argparse
import textwrap
import enum
import logging
from typing import Protocol
from pathlib import Path
import sys

logging.basicConfig(level=logging.WARNING)
LOG = logging.getLogger(__name__)


class Preset(enum.Enum):
    rust = "rust"
    python = "python"
    go = "go"


SHELL_NIX_TEMPLATE = """{ pkgs ? import <nixpkgs> { } }:
with pkgs;
mkShell {
  packages = [
  ];
}
"""

RUST_SHELL_NIX_TEMPLATE = """{ pkgs ? import <nixpkgs> { } }:
with pkgs;
mkShell rec {
  packages = [
    rustup
    clang
  ] ++ lib.optionals stdenv.isDarwin (with darwin.apple_sdk.frameworks; [
    libiconv
  ]) ++ lib.optionals stdenv.isLinux [
    mold
  ];

  env = {
    RUST_SRC_PATH = "${rustPlatform.rustLibSrc}";
    LD_LIBRARY_PATH = lib.makeLibraryPath packages;
  };
}
"""

PYTHON_SHELL_NIX_TEMPLATE = """{ pkgs ? import <nixpkgs> { } }:
with pkgs;
mkShell {
  packages = [
    python3
    python3Packages.venvShellHook
    uv
    ruff
  ];

  venvDir = ".venv";

  postVenvCreation = ''
  '';

  postShellHook = ''
    export VENV_DIR=$VIRTUAL_ENV
  '';
}
"""

GO_SHELL_NIX_TEMPLATE = """{ pkgs ? import <nixpkgs> { } }:
with pkgs;
mkShell {
  packages = [
    go
    gopls
    delve
  ];

  env = {
    # disable cgo by default
    CGO_ENABLED = "0";
  };
}
"""


def init_shell_nix(path: Path, content: str = SHELL_NIX_TEMPLATE):
    with path.open("w") as outfile:
        print(content, file=outfile)


def init_envrc(path: Path):
    with path.open("w") as outfile:
        print("use nix", file=outfile)


class Initialise(Protocol):
    def __call__(self, root: Path, force: bool):
        ...


def _init_dir(
    root: Path, force: bool, content: str, extra: list[Initialise] | None = None
):
    shell_nix_path = root.joinpath("shell.nix")
    envrc_path = root.joinpath(".envrc")

    if shell_nix_path.is_file() and not force:
        raise ValueError(f"file exists at {shell_nix_path}")

    if envrc_path.is_file() and not force:
        raise ValueError(f"file exists at {envrc_path}")

    init_shell_nix(shell_nix_path, content=content)
    init_envrc(envrc_path)

    for initialiser in extra or []:
        initialiser(root, force)


def generic_init_dir(root: Path, force: bool):
    LOG.debug("initialising generic layout")
    _init_dir(root, force, SHELL_NIX_TEMPLATE)


def initialise_rust_project(root: Path, force: bool):
    LOG.debug("initialising rust project")

    def init_cargo_dir(root: Path, force: bool):
        cargo_config_dir = root.joinpath(".cargo")
        cargo_config_dir.mkdir(parents=True, exist_ok=force)

        cargo_config_file = cargo_config_dir.joinpath("config.toml")
        with cargo_config_file.open("w") as outfile:
            print(
                textwrap.dedent(
                    """
                [target.x86_64-unknown-linux-gnu]
                linker = "clang"
                rustflags = ["-C", "link-arg=--ld-path=mold"]
                """
                ),
                file=outfile,
            )

    _init_dir(root, force, RUST_SHELL_NIX_TEMPLATE, extra=[init_cargo_dir])


def initialise_python_project(root: Path, force: bool):
    LOG.debug("initialising python project")
    _init_dir(root, force, PYTHON_SHELL_NIX_TEMPLATE)


def initialise_go_project(root: Path, force: bool):
    LOG.debug("initialising go project")
    _init_dir(root, force, GO_SHELL_NIX_TEMPLATE)


INITIALISERS: dict[Preset | None, Initialise] = {
    Preset.rust: initialise_rust_project,
    Preset.python: initialise_python_project,
    Preset.go: initialise_go_project,
}


def init_dir(root: Path, preset: Preset | None, force: bool = False):
    LOG.info(f"initialising {root}")

    root.mkdir(exist_ok=True, parents=True)
    initialiser = INITIALISERS.get(preset, generic_init_dir)
    initialiser(root, force)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-p",
        "--preset",
        required=False,
        type=Preset,
    )
    parser.add_argument("-v", "--verbose", action="store_true", default=False)
    parser.add_argument(
        "-r", "--root-dir", required=False, default=Path.cwd(), type=Path
    )
    parser.add_argument("-f", "--force", action="store_true", default=False)
    args = parser.parse_args()

    if args.verbose:
        LOG.setLevel(logging.DEBUG)

    try:
        init_dir(args.root_dir.resolve(), args.preset, args.force)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        raise SystemExit(1)
