#!/usr/bin/env python

import sys
import logging
import json
import time
import os
import subprocess as sp
from typing import Any
import urllib.request
import argparse

logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger("ls-restart")


def in_tmux() -> bool:
    return "TMUX" in os.environ


class Fzf:
    @classmethod
    def select_from(cls, choices: list[str]) -> str | None:
        if in_tmux():
            cmd = ["fzf-tmux"]
        else:
            cmd = ["fzf"]

        cmd.extend(["--prompt", "LocalStack container not found, select a container to restart: "])

        p = sp.Popen(cmd, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
        stdout, stderr = p.communicate(input="\n".join(choices).encode())
        if p.returncode != 0:
            print(stderr, file=sys.stderr)
            return None

        return stdout.decode().strip()


class DockerClient:
    @classmethod
    def list_containers(cls) -> list[str]:
        cmd = ["docker", "ps", "--format", "{{.Names}}"]
        return sp.check_output(cmd).decode().splitlines()

    @classmethod
    def restart_container(cls, container_name: str, wait: bool):
        cmd = ["docker", "kill", "--signal", "USR1", container_name]
        sp.check_call(cmd, stdout=sp.PIPE)
        if wait:
            logger.info("Waiting for new container to be healthy")
            HealthCheck().wait()
            
class HealthCheck:
    def wait(self):
        while True:
            if self.localstack_health():
                break
            time.sleep(0.5)

    def localstack_health(self) -> bool:
        return self._health_endpoint() and self._ready_init_scripts_endpoint()

    def _health_endpoint(self) -> bool:
        url = "http://localhost.localstack.cloud:4566/_localstack/health"
        logger.debug("checking health of '%s'", url)
        try:
            self._json_request(url)
        except Exception:
            return False

        return True

    def _ready_init_scripts_endpoint(self) -> bool:
        url = "http://localhost.localstack.cloud:4566/_localstack/init"
        logger.debug("checking health of '%s'", url)
        try:
            res = self._json_request(url)
        except Exception:
            return False

        completed = res.get("completed", {})
        return completed.get("READY", False) and not completed.get("SHUTDOWN", True)

    def _json_request(self, url: str) -> Any:
        res = urllib.request.urlopen(url)
        if res.status != 200:
            raise ValueError(f"Bad status: {res.status}")

        data = res.read()
        return json.loads(data.decode("utf-8"))

def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("--no-wait", action="store_true", default=False)
    parser.add_argument("-v", "--verbose", action="count", default=0)
    opts, args = parser.parse_known_args()

    if opts.verbose == 1:
        logger.setLevel(logging.INFO)
    elif opts.verbose > 1:
        logger.setLevel(logging.DEBUG)

    container_name = "localstack-main"
    if args:
        container_name = args[0]

    logger.info("Working with container '%s'", container_name)

    running_containers = DockerClient.list_containers()
    if container_name in running_containers:
        logger.info("Restarting container '%s'", container_name)
        DockerClient.restart_container(container_name, wait=not opts.no_wait)
        return 0

    chosen_container_name = Fzf.select_from(running_containers)
    if not chosen_container_name:
        print("No container name chosen or found, exiting", file=sys.stderr)
        return 1

    logger.info("Restarting container '%s'", chosen_container_name)
    DockerClient.restart_container(chosen_container_name, wait=not opts.no_wait)
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
